---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mobtgzhang.
--- DateTime: 2020/7/5 上午10:51
---
local data = {}
-- Create new dataset
function data.NewDataSet(outset,batchsize)
    local dataset = {}
    batchsize = batchsize or 1
    assert(batchsize>=1 and batchsize<=#outset)
    dataset.batchsize = batchsize
    dataset.dataset = outset
    setmetatable(dataset,{__index = function (tmpset,index)
        return tmpset.dataset[index]
    end})
    function dataset:size()
        return math.floor(#self.dataset/self.batchsize)
    end
    return dataset
end
-- Create random list
function data.RandFetch(num,poolSize,pool) -- list 存放筛选结果，num 筛取个数，poolSize 筛取源大小，pool 筛取源
    pool = pool or {}
    local list = {}
    math.randomseed( tonumber(tostring(os.time()):reverse():sub(1,6)))
    for i=1,num do
        local rand = math.random(i,poolSize)
        local tmp = pool[rand] or rand -- 对于第二个池子，序号跟id号是一致的
        pool[rand] = pool[i] or i
        pool[i] = tmp
        table.insert(list, tmp)
    end
    return list
end
-- Shuffle the dataset
function data.Shuffle(values)
    local length = #values
    local shuffled = data.RandFetch(length,length)
    for index,value in ipairs(shuffled) do
        values[index],values[shuffled[index]] = values[shuffled[index]],values[index]
    end
    return values
end
-- Split the dataset
function data.BuildDataSet(headers,values,config)
    config = config or {}
    local percetage = config['percetage'] or 0.75
    local shuffled = config['shuffled'] or true
    local length = #values
    local train_len = math.floor(percetage*length)
    if shuffled then
        values = data.Shuffle(values)
    end
    local traindata = {}
    local testdata = {}
    for index,value in ipairs(values) do
        if index <= train_len then
            table.insert(traindata,value)
        else
            table.insert(testdata,value)
        end
    end
    return data.NewDataSet(traindata,config['batch_train']),data.NewDataSet(testdata,config['batch_test'])
end
function data.Split(szFullString, szSeparator)
    local nFindStartIndex = 1
    local nSplitIndex = 1
    local nSplitArray = {}
    while true do
        local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
        if not nFindLastIndex then
            nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
            break
        end
        nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
        nFindStartIndex = nFindLastIndex + string.len(szSeparator)
        nSplitIndex = nSplitIndex + 1
    end
    return nSplitArray
end
function data.GetData(filename)
    local dataraw = io.open(filename)
    local rawheader = data.Split(dataraw:read(),";")
    local header = {}
    for key,value in ipairs(rawheader) do
        header[key] = string.sub(value,2,#value-1)
    end
    local data_table = {}
    for line in dataraw:lines() do
        local tmp_tab = {}
        local tmp_data = data.Split(line,";")
        for _,value in ipairs(tmp_data) do
            table.insert(tmp_tab,tonumber(value))
        end
        table.insert(data_table,tmp_tab)
    end
    dataraw.close()
    return header,data_table
end
return data